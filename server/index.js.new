// Nuevo archivo index.js con soporte para PostgreSQL
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const { Pool } = require('pg');
require('dotenv').config();

// Importar rutas
const paymentRoutes = require('./routes/payment.routes');
const subscriptionRoutes = require('./routes/subscription.routes');
const webhookRoutes = require('./routes/webhook.routes');
const webhookController = require('./controllers/webhook.controller');

const app = express();
const PORT = process.env.PORT || 3000;

// Configurar conexión a PostgreSQL si está habilitado
let pgPool = null;
if (process.env.USE_POSTGRES === 'true') {
  pgPool = new Pool({
    user: process.env.POSTGRES_USER,
    host: process.env.POSTGRES_HOST,
    database: process.env.POSTGRES_DB,
    password: process.env.POSTGRES_PASSWORD,
    port: process.env.POSTGRES_PORT || 5432,
  });
  
  // Middleware para hacer disponible la conexión a la base de datos en todas las rutas
  app.use((req, res, next) => {
    req.pgPool = pgPool;
    next();
  });
  
  // Verificar conexión a PostgreSQL
  pgPool.query('SELECT NOW()', (err, res) => {
    if (err) {
      console.error('Error al conectar a PostgreSQL:', err);
    } else {
      console.log('Conectado a PostgreSQL:', res.rows[0].now);
    }
  });
}

// Configurar CORS para permitir múltiples dominios
const allowedOrigins = [
  'http://localhost:4000',
  'https://localhost:4000',
  'http://www.loto-ia.com',
  'https://www.loto-ia.com',
  'http://loto-ia.com',
  'https://loto-ia.com'
];

// Middleware CORS
app.use(cors({
  origin: function(origin, callback) {
    // Permitir solicitudes sin origen (como aplicaciones móviles o curl)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.indexOf(origin) !== -1 || process.env.NODE_ENV === 'development') {
      callback(null, true);
    } else {
      callback(new Error('No permitido por CORS'));
    }
  },
  credentials: true
}));

// Middleware especial para webhooks de Stripe (debe estar antes del express.json())
app.use('/api/webhooks/stripe', express.raw({ type: 'application/json' }));

// Middleware para parsear JSON en el resto de rutas
app.use(express.json());

// Rutas
app.use('/api/payments', paymentRoutes);
app.use('/api/subscriptions', subscriptionRoutes);

// Configuración especial para la ruta de webhook de Stripe
app.post('/api/webhooks/stripe', webhookController.handleStripeWebhook);

// Otras rutas de webhook
app.use('/api/webhooks', webhookRoutes);

// Ruta de prueba
app.get('/api/health', (req, res) => {
  res.status(200).json({ message: 'Servidor funcionando correctamente' });
});

// Función para iniciar el servidor
const startServer = () => {
  app.listen(PORT, () => {
    console.log(`Servidor corriendo en el puerto ${PORT}`);
    console.log(`Modo de base de datos: ${process.env.USE_POSTGRES === 'true' ? 'PostgreSQL' : 'MongoDB'}`);
  });
};

// Iniciar servidor
if (process.env.USE_POSTGRES === 'true') {
  // Si estamos usando PostgreSQL, no necesitamos conectar a MongoDB
  startServer();
} else {
  // Conexión a MongoDB (solo si no estamos usando PostgreSQL)
  mongoose.connect(process.env.MONGODB_URI)
    .then(() => {
      console.log('Conectado a MongoDB');
      startServer();
    })
    .catch(err => {
      console.error('Error al conectar a MongoDB:', err);
    });
}

// Manejo de errores no controlados
process.on('uncaughtException', (error) => {
  console.error('Error no controlado:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Promesa rechazada no manejada:', promise, 'razón:', reason);
});

// Controlador de suscripciones con soporte para PostgreSQL
const Subscription = require('../models/subscription.model');

// Obtener todas las suscripciones de un usuario
exports.getUserSubscriptions = async (req, res) => {
  try {
    const { userId } = req.params;
    
    if (!userId) {
      return res.status(400).json({ error: 'Se requiere el ID del usuario' });
    }
    
    // Verificar si estamos usando PostgreSQL
    if (req.pgPool) {
      const client = await req.pgPool.connect();
      try {
        let queryText = '';
        let queryParams = [];
        
        // Si es un ObjectId de MongoDB, buscar por mongo_id en la tabla users y luego por user_id en subscriptions
        if (userId.match(/^[0-9a-fA-F]{24}$/)) {
          queryText = `
            SELECT s.*
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE u.mongo_id = $1
            ORDER BY s.created_at DESC
          `;
          queryParams = [userId];
        } else {
          // Si es un ID numérico de PostgreSQL, buscar directamente
          queryText = `
            SELECT * FROM subscriptions
            WHERE user_id = $1
            ORDER BY created_at DESC
          `;
          queryParams = [userId];
        }
        
        const result = await client.query(queryText, queryParams);
        
        res.status(200).json({
          success: true,
          subscriptions: result.rows
        });
      } finally {
        client.release();
      }
    } else {
      // Usar MongoDB
      const subscriptions = await Subscription.find({ userId }).sort({ createdAt: -1 });
      
      res.status(200).json({
        success: true,
        subscriptions
      });
    }
  } catch (error) {
    console.error('Error al obtener las suscripciones:', error);
    res.status(500).json({ error: 'Error al obtener las suscripciones' });
  }
};

// Obtener una suscripción por ID
exports.getSubscriptionById = async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!id) {
      return res.status(400).json({ error: 'Se requiere el ID de la suscripción' });
    }
    
    // Verificar si estamos usando PostgreSQL
    if (req.pgPool) {
      const client = await req.pgPool.connect();
      try {
        let queryText = '';
        let queryParams = [];
        
        // Si es un ObjectId de MongoDB, buscar por mongo_id
        if (id.match(/^[0-9a-fA-F]{24}$/)) {
          queryText = 'SELECT * FROM subscriptions WHERE mongo_id = $1';
          queryParams = [id];
        } else {
          // Si es un ID numérico de PostgreSQL, buscar directamente
          queryText = 'SELECT * FROM subscriptions WHERE id = $1';
          queryParams = [id];
        }
        
        const result = await client.query(queryText, queryParams);
        
        if (result.rows.length === 0) {
          return res.status(404).json({ error: 'Suscripción no encontrada' });
        }
        
        res.status(200).json({
          success: true,
          subscription: result.rows[0]
        });
      } finally {
        client.release();
      }
    } else {
      // Usar MongoDB
      const subscription = await Subscription.findById(id);
      
      if (!subscription) {
        return res.status(404).json({ error: 'Suscripción no encontrada' });
      }
      
      res.status(200).json({
        success: true,
        subscription
      });
    }
  } catch (error) {
    console.error('Error al obtener la suscripción:', error);
    res.status(500).json({ error: 'Error al obtener la suscripción' });
  }
};

// Cancelar una suscripción
exports.cancelSubscription = async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!id) {
      return res.status(400).json({ error: 'Se requiere el ID de la suscripción' });
    }
    
    // Verificar si estamos usando PostgreSQL
    if (req.pgPool) {
      const client = await req.pgPool.connect();
      try {
        let queryText = '';
        let queryParams = [];
        
        // Si es un ObjectId de MongoDB, buscar por mongo_id
        if (id.match(/^[0-9a-fA-F]{24}$/)) {
          queryText = 'UPDATE subscriptions SET status = $1, updated_at = NOW() WHERE mongo_id = $2 RETURNING *';
          queryParams = ['canceled', id];
        } else {
          // Si es un ID numérico de PostgreSQL, actualizar directamente
          queryText = 'UPDATE subscriptions SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *';
          queryParams = ['canceled', id];
        }
        
        const result = await client.query(queryText, queryParams);
        
        if (result.rows.length === 0) {
          return res.status(404).json({ error: 'Suscripción no encontrada' });
        }
        
        res.status(200).json({
          success: true,
          message: 'Suscripción cancelada correctamente',
          subscription: result.rows[0]
        });
      } finally {
        client.release();
      }
    } else {
      // Usar MongoDB
      const subscription = await Subscription.findById(id);
      
      if (!subscription) {
        return res.status(404).json({ error: 'Suscripción no encontrada' });
      }
      
      // Actualizar el estado de la suscripción
      subscription.status = 'canceled';
      await subscription.save();
      
      res.status(200).json({
        success: true,
        message: 'Suscripción cancelada correctamente',
        subscription
      });
    }
  } catch (error) {
    console.error('Error al cancelar la suscripción:', error);
    res.status(500).json({ error: 'Error al cancelar la suscripción' });
  }
};

// Verificar si un usuario tiene una suscripción activa
exports.checkActiveSubscription = async (req, res) => {
  try {
    const { userId } = req.params;
    
    if (!userId) {
      return res.status(400).json({ error: 'Se requiere el ID del usuario' });
    }
    
    const now = new Date();
    
    // Verificar si estamos usando PostgreSQL
    if (req.pgPool) {
      const client = await req.pgPool.connect();
      try {
        let queryText = '';
        let queryParams = [];
        
        // Si es un ObjectId de MongoDB, buscar por mongo_id en la tabla users y luego por user_id en subscriptions
        if (userId.match(/^[0-9a-fA-F]{24}$/)) {
          queryText = `
            SELECT s.*
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE u.mongo_id = $1
            AND s.status = 'active'
            AND s.end_date > NOW()
            ORDER BY s.end_date DESC
            LIMIT 1
          `;
          queryParams = [userId];
        } else {
          // Si es un ID numérico de PostgreSQL, buscar directamente
          queryText = `
            SELECT * FROM subscriptions
            WHERE user_id = $1
            AND status = 'active'
            AND end_date > NOW()
            ORDER BY end_date DESC
            LIMIT 1
          `;
          queryParams = [userId];
        }
        
        const result = await client.query(queryText, queryParams);
        
        // Buscar suscripciones pendientes (recién creadas)
        let pendingQueryText = '';
        if (userId.match(/^[0-9a-fA-F]{24}$/)) {
          pendingQueryText = `
            SELECT s.*, p.status as payment_status
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            JOIN payments p ON p.subscription_id = s.id
            WHERE u.mongo_id = $1
            AND p.status = 'succeeded'
            AND s.status = 'pending'
            ORDER BY s.created_at DESC
            LIMIT 1
          `;
        } else {
          pendingQueryText = `
            SELECT s.*, p.status as payment_status
            FROM subscriptions s
            JOIN payments p ON p.subscription_id = s.id
            WHERE s.user_id = $1
            AND p.status = 'succeeded'
            AND s.status = 'pending'
            ORDER BY s.created_at DESC
            LIMIT 1
          `;
        }
        
        const pendingResult = await client.query(pendingQueryText, queryParams);
        
        // Si hay una suscripción pendiente con pago exitoso, actualizarla a activa
        if (pendingResult.rows.length > 0) {
          const pendingSub = pendingResult.rows[0];
          
          // Actualizar la suscripción a activa
          await client.query(
            'UPDATE subscriptions SET status = $1, updated_at = NOW() WHERE id = $2',
            ['active', pendingSub.id]
          );
          
          pendingSub.status = 'active';
          
          res.status(200).json({
            success: true,
            hasActiveSubscription: true,
            subscription: pendingSub
          });
        } else {
          res.status(200).json({
            success: true,
            hasActiveSubscription: result.rows.length > 0,
            subscription: result.rows.length > 0 ? result.rows[0] : null
          });
        }
      } finally {
        client.release();
      }
    } else {
      // Usar MongoDB
      // Buscar suscripciones activas que no hayan expirado
      const activeSubscription = await Subscription.findOne({
        userId,
        status: 'active',
        endDate: { $gt: now }
      }).sort({ endDate: -1 });
      
      // Buscar suscripciones pendientes con pagos exitosos
      if (!activeSubscription) {
        const Payment = require('../models/payment.model');
        
        // Verificar si hay alguna suscripción pendiente con pago exitoso
        const pendingSub = await Subscription.findOne({
          userId,
          status: 'pending'
        }).sort({ createdAt: -1 });
        
        if (pendingSub) {
          const payment = await Payment.findOne({
            subscriptionId: pendingSub._id,
            status: 'succeeded'
          });
          
          if (payment) {
            // Actualizar la suscripción a activa
            pendingSub.status = 'active';
            await pendingSub.save();
            
            return res.status(200).json({
              success: true,
              hasActiveSubscription: true,
              subscription: pendingSub
            });
          }
        }
      }
      
      res.status(200).json({
        success: true,
        hasActiveSubscription: !!activeSubscription,
        subscription: activeSubscription
      });
    }
  } catch (error) {
    console.error('Error al verificar la suscripción:', error);
    res.status(500).json({ error: 'Error al verificar la suscripción' });
  }
};

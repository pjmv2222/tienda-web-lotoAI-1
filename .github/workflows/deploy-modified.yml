name: Deploy Production (2-Phase)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: 212.227.230.103
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== INICIO: DESPLIEGUE EN DOS FASES ==="
            
            # 1. Navegar al directorio del proyecto
            cd /var/www/tienda-web-lotoAI-1 || exit 1
            
            # 1.5. Respaldar archivos de configuración del servidor
            echo "--- Fase 1.5: Respaldando archivos de configuración del servidor ---"
            if [ -f ".env" ]; then
              cp .env .env.backup
              echo "✅ Archivo .env respaldado"
            else
              echo "⚠️  Archivo .env no encontrado para respaldar"
            fi
            if [ -f ".env.production" ]; then
              cp .env.production .env.production.backup
              echo "✅ Archivo .env.production respaldado"
            fi
            
            # Respaldar archivos críticos del scraper
            if [ -f "src/assets/botes.json" ]; then
              cp src/assets/botes.json src/assets/botes.json.backup
              echo "✅ Archivo botes.json (src) respaldado"
            else
              echo "⚠️  Archivo src/assets/botes.json no encontrado para respaldar"
            fi
            if [ -f "dist/tienda-web-loto-ai/browser/assets/botes.json" ]; then
              cp dist/tienda-web-loto-ai/browser/assets/botes.json dist/tienda-web-loto-ai/browser/assets/botes.json.backup
              echo "✅ Archivo botes.json (dist) respaldado"
            else
              echo "⚠️  Archivo dist botes.json no encontrado para respaldar"
            fi
            
            # 2. Actualizar desde GitHub
            echo "--- Fase 2: Actualizando código fuente ---"
            git fetch origin main
            git reset --hard origin/main
            git pull origin main
            
            # 2.5. Restaurar archivos de configuración del servidor
            echo "--- Fase 2.5: Restaurando archivos de configuración del servidor ---"
            if [ -f ".env.backup" ]; then
              cp .env.backup .env
              rm .env.backup
              echo "✅ Archivo .env restaurado"
            else
              echo "❌ No se pudo restaurar .env - archivo de respaldo no encontrado"
            fi
            if [ -f ".env.production.backup" ]; then
              cp .env.production.backup .env.production
              rm .env.production.backup
              echo "✅ Archivo .env.production restaurado"
            fi
            
            # Restaurar archivos críticos del scraper
            if [ -f "src/assets/botes.json.backup" ]; then
              cp src/assets/botes.json.backup src/assets/botes.json
              rm src/assets/botes.json.backup
              echo "✅ Archivo botes.json (src) restaurado con datos actualizados del scraper"
            else
              echo "❌ No se pudo restaurar botes.json (src) - archivo de respaldo no encontrado"
            fi
            if [ -f "dist/tienda-web-loto-ai/browser/assets/botes.json.backup" ]; then
              # Crear directorio si no existe
              mkdir -p dist/tienda-web-loto-ai/browser/assets/
              cp dist/tienda-web-loto-ai/browser/assets/botes.json.backup dist/tienda-web-loto-ai/browser/assets/botes.json
              rm dist/tienda-web-loto-ai/browser/assets/botes.json.backup
              echo "✅ Archivo botes.json (dist) restaurado con datos actualizados del scraper"
            else
              echo "❌ No se pudo restaurar botes.json (dist) - archivo de respaldo no encontrado"
            fi
            
            # 3. Verificar variables de entorno
            echo "--- Fase 3: Verificando variables de entorno ---"
            if [ -f ".env" ]; then
              echo "✅ Archivo .env del servidor encontrado"
              # Verificar que contenga las claves importantes
              if grep -q "STRIPE_SECRET_KEY" .env; then
                echo "✅ STRIPE_SECRET_KEY encontrada en .env"
              else
                echo "❌ STRIPE_SECRET_KEY NO encontrada en .env"
              fi
            else
              echo "❌ Archivo .env del servidor NO encontrado"
            fi

            # 4. Instalar dependencias
            echo "--- Fase 4: Instalando dependencias ---"
            npm install --production=false
            
            # 5. Limpiar builds anteriores
            echo "--- Fase 5: Limpiando artefactos ---"
            rm -rf dist/
            
            # 6. Compilar el Backend (TSC)
            echo "--- Fase 6: Compilando Backend ---"
            npx tsc --project src/backend/tsconfig.backend.json
            if [ $? -ne 0 ]; then
              echo "❌ Error de compilación en el Backend. Abortando despliegue."
              exit 1
            fi
            
            # 7. Compilar el Frontend (Angular SSR)
            echo "--- Fase 7: Compilando Frontend ---"
            npx ng build
            if [ $? -ne 0 ]; then
              echo "❌ Error de compilación en el Frontend. Abortando despliegue."
              exit 1
            fi
            
            # 7.5. Asegurar que botes.json actualizado esté en dist después del build
            echo "--- Fase 7.5: Copiando botes.json actualizado a dist ---"
            if [ -f "src/assets/botes.json" ]; then
              mkdir -p dist/tienda-web-loto-ai/browser/assets/
              cp src/assets/botes.json dist/tienda-web-loto-ai/browser/assets/botes.json
              echo "✅ Archivo botes.json actualizado copiado a dist"
            else
              echo "⚠️  Archivo src/assets/botes.json no encontrado para copiar a dist"
            fi
            
            # 8. Reiniciar los servicios con PM2
            echo "--- Fase 8: Reiniciando servicios con PM2 ---"
            pm2 restart ecosystem.config.js --env production || {
              echo "ℹ️  No se pudo reiniciar, intentando iniciar de nuevo..."
              pm2 start ecosystem.config.js --env production
            }
            
            # 8.5. Verificar que PM2 está funcionando correctamente
            echo "--- Fase 8.5: Verificando estado de PM2 ---"
            sleep 5
            pm2 status
            echo "--- Logs recientes del backend ---"
            timeout 10 pm2 logs loto-ia-backend --lines 15 || echo "Timeout en logs, continuando..."
            echo "--- Verificando si el backend está corriendo ---"
            pm2 info loto-ia-backend
            
            # 9. Actualizar y recargar NGINX
            echo "--- Fase 9: Actualizando configuración de NGINX ---"
            cp nginx.conf /etc/nginx/sites-available/loto-ia.com
            ln -sf /etc/nginx/sites-available/loto-ia.com /etc/nginx/sites-enabled/
            chown root:root /etc/nginx/sites-available/loto-ia.com
            chmod 644 /etc/nginx/sites-available/loto-ia.com
            nginx -t # Probar la sintaxis de la configuración
            if [ $? -eq 0 ]; then
              echo "✅ Sintaxis de NGINX correcta. Recargando NGINX..."
              systemctl reload nginx
            else
              echo "❌ Error de sintaxis en nginx.conf. No se recargará NGINX."
              exit 1
            fi

            echo "✅ FIN: DESPLIEGUE COMPLETADO CON ÉXITO"

      - name: Deployment success notification
        if: success()
        run: |
          echo "::notice::Deployment completed successfully! The application has been deployed to the VPS."

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "::error::Deployment failed! Please check the logs for more information."

name: Deploy LotoIA to VPS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'IAs-Loto/**'
      - 'ias/**'
      - '.github/workflows/deploy-with-ias.yml'
  workflow_dispatch:  # Permite ejecutar manualmente desde la interfaz de GitHub

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Obtener todo el historial para que git describe funcione correctamente

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: 212.227.230.103
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "=== INICIO DEL DESPLIEGUE ==="

          echo "=== Configurando entorno ==="
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          export PATH=$PATH:/usr/local/bin:/usr/bin:/root/.nvm/versions/node/v18.19.0/bin
          export NODE_OPTIONS="--max-old-space-size=4096"

          echo "=== Navegando al directorio del proyecto ==="
          cd /var/www/tienda-web-lotoAI-1 || { echo "Error: No se pudo acceder al directorio del proyecto"; exit 1; }

          echo "=== Actualizando desde GitHub ==="
          git reset --hard HEAD
          git clean -fd
          git checkout main
          git fetch origin
          git reset --hard origin/main || { echo "Error: No se pudo actualizar desde GitHub"; exit 1; }

          echo "=== Verificando archivos críticos ==="
          if [ ! -f "fix-build.js" ]; then
            echo "❌ ERROR: fix-build.js no encontrado"
            exit 1
          fi
          
          if [ ! -f "server.ts" ]; then
            echo "❌ ERROR: server.ts no encontrado"
            exit 1
          fi
          
          if [ ! -f "nginx.conf" ]; then
            echo "❌ ERROR: nginx.conf no encontrado"
            exit 1
          fi
          
          echo "✅ Archivos críticos verificados"

          echo "=== Actualizando configuración NGINX ==="
          # Backup de la configuración actual
          cp /etc/nginx/sites-available/loto-ia.com /etc/nginx/sites-available/loto-ia.com.backup.$(date +%Y%m%d_%H%M%S)
          
          # Copiar nueva configuración
          cp nginx.conf /etc/nginx/sites-available/loto-ia.com
          
          # Verificar configuración de nginx
          nginx -t || { echo "❌ ERROR: Configuración de nginx inválida"; exit 1; }
          
          echo "✅ Configuración NGINX actualizada"

          echo "=== Instalación de dependencias ==="
          npm install -g @angular/cli pm2
          
          if [ -d "node_modules" ]; then
            rm -rf node_modules
          fi
          npm ci --ignore-scripts || npm install --ignore-scripts

          echo "=== Compilando backend ==="
          npm run build:backend || { echo "Error: No se pudo compilar el backend"; exit 1; }
          echo "✅ Backend compilado"

          echo "=== Compilando aplicación SSR ==="
          timeout 1800 npm run build:ssr || { echo "Error: No se pudo compilar la aplicación SSR"; exit 1; }
          echo "✅ Aplicación SSR compilada"

          echo "=== Verificando archivos compilados ==="
          if [ -f "dist/tienda-web-loto-ai/server/main.server.mjs" ]; then
            echo "✅ Servidor SSR encontrado"
          else
            echo "❌ ERROR: Servidor SSR no encontrado"
            ls -la dist/tienda-web-loto-ai/server/ || echo "Directorio server no existe"
            exit 1
          fi

          if [ -f "dist/tienda-web-loto-ai/browser/index.csr.html" ]; then
            echo "✅ index.csr.html encontrado (creado por fix-build.js)"
          else
            echo "❌ ERROR: index.csr.html no encontrado"
            ls -la dist/tienda-web-loto-ai/browser/ | grep index || echo "No hay archivos index"
            exit 1
          fi

          echo "=== Configurando PM2 ==="
          PM2_PATH=$(which pm2)
          
          # Detener procesos existentes
          $PM2_PATH stop all || true
          $PM2_PATH delete all || true

          # Configurar backend
          cat > ecosystem-backend.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'loto-ia-backend',
              script: 'src/backend/dist/index.js',
              instances: 1,
              autorestart: true,
              watch: false,
              max_restarts: 10,
              min_uptime: '20s',
              env: {
                NODE_ENV: 'production',
                PORT: 3001
              }
            }]
          };
          EOF

          # Configurar SSR
          cat > ecosystem-ssr.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'loto-ia-ssr',
              script: 'dist/tienda-web-loto-ai/server/main.server.mjs',
              instances: 1,
              autorestart: true,
              watch: false,
              max_restarts: 10,
              min_uptime: '20s',
              env: {
                NODE_ENV: 'production',
                PORT: 4000
              }
            }]
          };
          EOF

          echo "=== Iniciando servicios ==="
          $PM2_PATH start ecosystem-backend.config.js
          $PM2_PATH start ecosystem-ssr.config.js
          $PM2_PATH save

          echo "=== Reiniciando NGINX ==="
          systemctl reload nginx || { echo "❌ ERROR: No se pudo recargar nginx"; exit 1; }
          echo "✅ NGINX recargado"

          echo "=== Verificando servicios ==="
          sleep 10
          $PM2_PATH status

          # Verificar que los puertos estén escuchando
          if netstat -tuln | grep -q ":3001 "; then
            echo "✅ Backend escuchando en puerto 3001"
          else
            echo "❌ Backend NO está escuchando en puerto 3001"
          fi

          if netstat -tuln | grep -q ":4000 "; then
            echo "✅ SSR escuchando en puerto 4000"
          else
            echo "❌ SSR NO está escuchando en puerto 4000"
          fi

          echo "=== DESPLIEGUE COMPLETADO ==="
          echo "🚀 Aplicación disponible en: https://loto-ia.com"

    - name: Deployment success notification
      if: success()
      run: |
        echo "::notice::Deployment completed successfully! The application has been deployed to the VPS."

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "::error::Deployment failed! Please check the logs for more information."

name: Deploy to Server (Modified)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "=== INICIANDO DESPLIEGUE AUTOMATIZADO ==="
          
          # 1. Navegar al directorio
          cd /var/www/tienda-web-lotoAI-1 || exit 1
          
          # 2. Respaldar archivos críticos
          echo "--- Fase 2: Respaldando archivos críticos ---"
          mkdir -p .deploy-backups
          
          [ -f ".env" ] && cp .env .deploy-backups/.env.backup && echo "✅ .env respaldado"
          [ -f ".env.production" ] && cp .env.production .deploy-backups/.env.production.backup && echo "✅ .env.production respaldado"
          [ -f "src/assets/botes.json" ] && cp src/assets/botes.json .deploy-backups/botes.json.backup && echo "✅ botes.json respaldado"
          [ -f "src/assets/lottery-data.json" ] && cp src/assets/lottery-data.json .deploy-backups/lottery-data.json.backup && echo "✅ lottery-data.json respaldado"
          
          # 3. Actualizar desde GitHub
          echo "--- Fase 3: Actualizando código fuente ---"
          git fetch origin main
          git reset --hard origin/main
          
          # 4. Restaurar archivos críticos
          echo "--- Fase 4: Restaurando archivos del servidor ---"
          [ -f ".deploy-backups/.env.backup" ] && cp .deploy-backups/.env.backup .env && echo "✅ .env restaurado"
          [ -f ".deploy-backups/.env.production.backup" ] && cp .deploy-backups/.env.production.backup .env.production && echo "✅ .env.production restaurado"
          [ -f ".deploy-backups/botes.json.backup" ] && cp .deploy-backups/botes.json.backup src/assets/botes.json && echo "✅ botes.json restaurado"
          [ -f ".deploy-backups/lottery-data.json.backup" ] && cp .deploy-backups/lottery-data.json.backup src/assets/lottery-data.json && echo "✅ lottery-data.json restaurado"
          
          # 5. Verificar variables de entorno
          echo "--- Fase 5: Verificando configuración ---"
          if [ -f ".env" ] && grep -q "STRIPE_SECRET_KEY" .env; then
            echo "✅ Configuración verificada"
          else
            echo "❌ Error: STRIPE_SECRET_KEY no encontrada"
            exit 1
          fi
          
          # 6. Instalar dependencias
          echo "--- Fase 6: Instalando dependencias ---"
          npm ci --production=false || npm install --production=false
          
          # 7. Compilar Backend
          echo "--- Fase 7: Compilando Backend ---"
          cd src/backend
          npm ci || npm install
          npm run build
          cd /var/www/tienda-web-lotoAI-1
          [ ! -f "src/backend/dist/index.js" ] && echo "❌ Error: Backend no compilado" && exit 1
          echo "✅ Backend compilado"
          
          # 8. Compilar Frontend
          echo "--- Fase 8: Compilando Frontend ---"
          rm -rf dist/
          NODE_OPTIONS="--max-old-space-size=3072" npx ng build --configuration=production
          [ $? -ne 0 ] && echo "❌ Error: Frontend no compilado" && exit 1
          echo "✅ Frontend compilado"
          
          # 9. Restaurar JSONs en dist
          echo "--- Fase 9: Restaurando JSONs en dist ---"
          mkdir -p dist/tienda-web-loto-ai/browser/assets/
          [ -f ".deploy-backups/botes.json.backup" ] && cp .deploy-backups/botes.json.backup dist/tienda-web-loto-ai/browser/assets/botes.json
          [ -f ".deploy-backups/lottery-data.json.backup" ] && cp .deploy-backups/lottery-data.json.backup dist/tienda-web-loto-ai/browser/assets/lottery-data.json
          
          # 10. Reiniciar servicios PM2
          echo "--- Fase 10: Reiniciando servicios ---"
          pm2 stop all 2>/dev/null || true
          pm2 delete all 2>/dev/null || true
          pm2 start ecosystem.config.js --env production
          pm2 save
          echo "✅ Servicios PM2 reiniciados"
          
          # 11. Verificar servicios
          echo "--- Fase 11: Verificando servicios ---"
          sleep 3
          pm2 list
          
          # 12. Actualizar NGINX
          echo "--- Fase 12: Actualizando NGINX ---"
          cp nginx.conf /etc/nginx/sites-available/loto-ia.com
          nginx -t && systemctl reload nginx && echo "✅ NGINX actualizado"
          
          # 13. Limpieza
          echo "--- Fase 13: Limpiando archivos temporales ---"
          rm -rf .deploy-backups
          
          echo "=== ✅ DESPLIEGUE COMPLETADO CON ÉXITO ==="

    - name: Deployment success notification
      if: success()
      run: |
        echo "::notice::✅ Deployment completed successfully!"

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "::error::❌ Deployment failed! Check the logs."
            echo "--- Fase 13: Limpiando archivos temporales ---"
            rm -rf .deploy-backups
            
            echo "=== ✅ DESPLIEGUE COMPLETADO CON ÉXITO ==="

      - name: Deployment success notification
        if: success()
        run: |
          echo "::notice::✅ Deployment completed successfully!"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "::error::❌ Deployment failed! Check the logs."
            fi
            
            # Restaurar archivos críticos del scraper
            if [ -f "src/assets/botes.json.backup" ]; then
              cp src/assets/botes.json.backup src/assets/botes.json
              rm src/assets/botes.json.backup
              echo "✅ Archivo botes.json (src) restaurado con datos actualizados del scraper"
            else
              echo "❌ No se pudo restaurar botes.json (src) - archivo de respaldo no encontrado"
            fi
            if [ -f "src/assets/lottery-data.json.backup" ]; then
              cp src/assets/lottery-data.json.backup src/assets/lottery-data.json
              rm src/assets/lottery-data.json.backup
              echo "✅ Archivo lottery-data.json (src) restaurado con datos actualizados del scraper"
            else
              echo "❌ No se pudo restaurar lottery-data.json (src) - archivo de respaldo no encontrado"
            fi
            # Restauración de archivos JSON en dist se mueve después del build (ver más abajo)
            
            # Restaurar configuraciones específicas del servidor IA
            # IMPORTANTE: NO restaurar server-ia-unificado.py porque debe actualizarse desde el repositorio
            echo "--- NOTA: server-ia-unificado.py NO se restaura - debe usar versión actualizada del repositorio ---"
            if [ -f "archivos-para-servidor/server-ia-unificado.py.backup" ]; then
              rm archivos-para-servidor/server-ia-unificado.py.backup
              echo "✅ Backup obsoleto de server-ia-unificado.py eliminado - usando versión del repositorio"
            fi
            if [ -f "server-ia-unificado.py.backup" ]; then
              rm server-ia-unificado.py.backup
              echo "✅ Backup obsoleto de server-ia-unificado.py (raíz) eliminado - usando versión del repositorio"
            fi
            
            # 3. Verificar variables de entorno
            echo "--- Fase 3: Verificando variables de entorno ---"
            if [ -f ".env" ]; then
              echo "✅ Archivo .env del servidor encontrado"
              # Verificar que contenga las claves importantes
              if grep -q "STRIPE_SECRET_KEY" .env; then
                echo "✅ STRIPE_SECRET_KEY encontrada en .env"
              else
                echo "❌ STRIPE_SECRET_KEY NO encontrada en .env"
              fi
            else
              echo "❌ Archivo .env del servidor NO encontrado"
            fi

            # 4. Instalar dependencias
            echo "--- Fase 4: Instalando dependencias ---"
            npm install --production=false
            
            # 5. Limpiar builds anteriores
            echo "--- Fase 5: Limpiando artefactos ---"
            rm -rf dist/
            
            # 6. Compilar el Backend (TSC)
            echo "--- Fase 6: Compilando Backend ---"
            cd src/backend
            npm install
            npm run build
            cd /var/www/tienda-web-lotoAI-1
            if [ ! -f "src/backend/dist/index.js" ]; then
              echo "❌ Error de compilación en el Backend. Archivo index.js no encontrado. Abortando despliegue."
              exit 1
            fi
            echo "✅ Backend compilado correctamente en src/backend/dist/index.js"
            
            # 7. Compilar el Frontend (Angular SSR)
            echo "--- Fase 7: Compilando Frontend ---"
            # Aumentar memoria swap temporalmente para la compilación
            sudo fallocate -l 2G /swapfile || true
            sudo chmod 600 /swapfile || true
            sudo mkswap /swapfile || true
            sudo swapon /swapfile || true
            
            # Compilar con opciones de memoria optimizadas
            NODE_OPTIONS="--max-old-space-size=4096" npx ng build --configuration=production
            if [ $? -ne 0 ]; then
              echo "❌ Error de compilación en el Frontend. Abortando despliegue."
              # Limpiar swap
              sudo swapoff /swapfile || true
              sudo rm /swapfile || true
              exit 1
            fi
            
            # Limpiar swap después de la compilación
            sudo swapoff /swapfile || true
            sudo rm /swapfile || true
            
            # 7.4. Restaurar archivos JSON en dist después del build
            echo "--- Fase 7.4: Restaurando archivos JSON en dist después del build ---"
            if [ -f ".deploy-backups/botes.json.backup" ]; then
              mkdir -p dist/tienda-web-loto-ai/browser/assets/
              cp .deploy-backups/botes.json.backup dist/tienda-web-loto-ai/browser/assets/botes.json
              echo "✅ Archivo botes.json (dist) restaurado después del build"
            else
              echo "❌ No se pudo restaurar botes.json (dist) - archivo de respaldo no encontrado"
            fi
            if [ -f ".deploy-backups/lottery-data.json.backup" ]; then
              mkdir -p dist/tienda-web-loto-ai/browser/assets/
              cp .deploy-backups/lottery-data.json.backup dist/tienda-web-loto-ai/browser/assets/lottery-data.json
              echo "✅ Archivo lottery-data.json (dist) restaurado después del build"
            else
              echo "❌ No se pudo restaurar lottery-data.json (dist) - archivo de respaldo no encontrado"
            fi

            # 7.5. Verificar que archivos JSON están en dist después del build
            echo "--- Fase 7.5: Verificando archivos JSON en dist ---"
            if [ -f "dist/tienda-web-loto-ai/browser/assets/botes.json" ]; then
              echo "✅ Archivo botes.json encontrado en dist (copiado/restaurado correctamente)"
            else
              echo "⚠️  Archivo botes.json NO encontrado en dist"
            fi
            if [ -f "dist/tienda-web-loto-ai/browser/assets/lottery-data.json" ]; then
              echo "✅ Archivo lottery-data.json encontrado en dist (copiado/restaurado correctamente)"
            else
              echo "⚠️  Archivo lottery-data.json NO encontrado en dist"
            fi
            
            # 8. Reiniciar los servicios con PM2 - LIMPIEZA COMPLETA
            echo "--- Fase 8: Limpiando y reiniciando servicios con PM2 ---"
            pm2 stop all || echo "No había procesos corriendo"
            pm2 delete all || echo "No había procesos para eliminar"
            pm2 save --force
            echo "✅ PM2 limpiado completamente"
            
            # Iniciar con configuración limpia
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            # 8.5. Verificar que PM2 está funcionando correctamente
            echo "--- Fase 8.5: Verificando estado de PM2 ---"
            sleep 5
            pm2 status
            echo "--- Logs recientes del backend ---"
            timeout 10 pm2 logs backend --lines 15 || echo "Timeout en logs, continuando..."
            echo "--- Verificando si el backend está corriendo ---"
            pm2 info backend
            
            # 9. Actualizar y recargar NGINX
            echo "--- Fase 9: Actualizando configuración de NGINX ---"
            cp nginx.conf /etc/nginx/sites-available/loto-ia.com
            ln -sf /etc/nginx/sites-available/loto-ia.com /etc/nginx/sites-enabled/
            chown root:root /etc/nginx/sites-available/loto-ia.com
            chmod 644 /etc/nginx/sites-available/loto-ia.com
            nginx -t # Probar la sintaxis de la configuración
            if [ $? -eq 0 ]; then
              echo "✅ Sintaxis de NGINX correcta. Recargando NGINX..."
              systemctl reload nginx
            else
              echo "❌ Error de sintaxis en nginx.conf. No se recargará NGINX."
              exit 1
            fi

            # 10. Limpiar archivos temporales del despliegue
            echo "--- Fase 10: Limpiando archivos temporales ---"
            rm -rf .deploy-backups
            # NUEVO: NO eliminar el backup del workflow, mantenerlo para futuros despliegues
            echo "✅ Directorio temporal .deploy-backups eliminado"
            echo "ℹ️  Backup de deploy-modified.yml mantenido para futuros despliegues"

            echo "✅ FIN: DESPLIEGUE COMPLETADO CON ÉXITO"

      - name: Deployment success notification
        if: success()
        run: |
          echo "::notice::Deployment completed successfully! The application has been deployed to the VPS."

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "::error::Deployment failed! Please check the logs for more information."

name: Deploy Production (2-Phase)

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'IAs-Loto/**'
      - 'ias/**'
      - '*.md'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: 212.227.230.103
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== INICIO: DESPLIEGUE ATÓMICO ==="

            # 1. Navegar al directorio del proyecto
            cd /var/www/tienda-web-lotoAI-1 || exit 1

            # 1.5. Respaldar archivos de configuración críticos
            echo "--- Fase 1.5: Respaldando archivos de configuración ---"
            # (Tu lógica de backup existente es buena, la mantenemos)
            # ... (copia de .env, .env.production, etc.)
            if [ -f ".env" ]; then cp .env .env.backup; echo "✅ .env respaldado"; fi
            if [ -f ".env.production" ]; then cp .env.production .env.production.backup; echo "✅ .env.production respaldado"; fi
            if [ -f "src/assets/botes.json" ]; then cp src/assets/botes.json src/assets/botes.json.backup; echo "✅ botes.json respaldado"; fi
            if [ -f "src/assets/lottery-data.json" ]; then cp src/assets/lottery-data.json src/assets/lottery-data.json.backup; echo "✅ lottery-data.json respaldado"; fi


            # 2. Actualizar desde GitHub
            echo "--- Fase 2: Actualizando código fuente ---"
            git fetch origin main
            git reset --hard origin/main
            git pull origin main

            # 2.5. Restaurar archivos de configuración
            echo "--- Fase 2.5: Restaurando archivos de configuración ---"
            # (Tu lógica de restauración es buena, la mantenemos)
            if [ -f ".env.backup" ]; then mv .env.backup .env; echo "✅ .env restaurado"; fi
            if [ -f ".env.production.backup" ]; then mv .env.production.backup .env.production; echo "✅ .env.production restaurado"; fi
            if [ -f "src/assets/botes.json.backup" ]; then mv src/assets/botes.json.backup src/assets/botes.json; echo "✅ botes.json restaurado"; fi
            if [ -f "src/assets/lottery-data.json.backup" ]; then mv src/assets/lottery-data.json.backup src/assets/lottery-data.json; echo "✅ lottery-data.json restaurado"; fi

            # 4. Instalar dependencias
            echo "--- Fase 4: Instalando dependencias ---"
            npm install --production=false

            # 6. Compilar el Backend (TSC)
            echo "--- Fase 6: Compilando Backend ---"
            cd src/backend
            npm install
            npm run build
            cd /var/www/tienda-web-lotoAI-1
            if [ ! -f "src/backend/dist/index.js" ]; then
              echo "❌ Error de compilación en el Backend. Abortando."
              exit 1
            fi
            echo "✅ Backend compilado."

            # 7. Compilar el Frontend en un directorio temporal
            echo "--- Fase 7: Compilando Frontend (Build Atómico) ---"
            # Aumentar memoria swap
            sudo fallocate -l 2G /swapfile || true
            sudo chmod 600 /swapfile || true
            sudo mkswap /swapfile || true
            sudo swapon /swapfile || true

            # Compilar en un directorio temporal 'dist_new'
            NODE_OPTIONS="--max-old-space-size=4096" npx ng build --configuration=production --output-path=dist_new
            if [ $? -ne 0 ]; then
              echo "❌ Error de compilación en el Frontend. Abortando."
              sudo swapoff /swapfile || true
              sudo rm /swapfile || true
              exit 1
            fi
            echo "✅ Frontend compilado en 'dist_new'."

            # Limpiar swap
            sudo swapoff /swapfile || true
            sudo rm /swapfile || true

            # 8. Reemplazo Atómico y Reinicio de PM2
            echo "--- Fase 8: Reemplazo Atómico y Reinicio de Servicios ---"
            
            # Parar SOLO el frontend para evitar conflictos
            pm2 stop frontend || echo "Frontend no estaba corriendo."

            # El reemplazo atómico
            rm -rf dist  # Eliminar el directorio antiguo
            mv dist_new dist # Mover el nuevo a su lugar (operación instantánea)
            echo "✅ Directorio 'dist' reemplazado atómicamente."

            # Reiniciar todos los servicios
            pm2 restart all --env production
            pm2 save
            
            echo "✅ Servicios reiniciados con la nueva versión."

            # 8.5. Verificación Post-Reinicio
            echo "--- Fase 8.5: Verificando estado de PM2 ---"
            sleep 8
            pm2 status
            netstat -tuln | grep -E ':3000|:4000|:5000' || echo "⚠️  Algunos puertos no parecen estar activos."
            
            echo "--- Logs recientes del frontend ---"
            timeout 10 pm2 logs frontend --lines 15 || echo "Timeout en logs frontend, continuando..."

            # 9. Actualizar y recargar NGINX (sin cambios)
            echo "--- Fase 9: Actualizando configuración de NGINX ---"
            cp nginx.conf /etc/nginx/sites-available/loto-ia.com
            ln -sf /etc/nginx/sites-available/loto-ia.com /etc/nginx/sites-enabled/
            nginx -t
            if [ $? -eq 0 ]; then
              echo "✅ Sintaxis de NGINX correcta. Recargando..."
              systemctl reload nginx
            else
              echo "❌ Error de sintaxis en nginx.conf. No se recargará NGINX."
              exit 1
            fi

            echo "✅ FIN: DESPLIEGUE ATÓMICO COMPLETADO CON ÉXITO"

      - name: Deployment success notification
        if: success()
        run: |
          echo "::notice::Deployment completed successfully! The application has been deployed to the VPS."

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "::error::Deployment failed! Please check the logs for more information."
